{"version":3,"file":"ng-dropzone.min.js","sources":["ng-dropzone.min.js"],"sourcesContent":["/**!\n * AngularJS dropzone directive\n * @author Uday Hiwarale <uhiwarale@gmail.com>\n * https://www.github.com/thatisuday/ngDropzone\n */\n\n\n(function(root){\n    'use strict';\n  function factory(angular, Dropzone){\n    // Handle both `Dropzone.default` and `Dropzone.Dropzone` depending on how it's being exported\n    Dropzone = Dropzone.default || Dropzone.Dropzone || Dropzone;\n\n    angular.module('thatisuday.dropzone', []).provider('dropzoneOps', function(){\n      /*\n       *  Add default options here\n      **/\n      var defOps = {\n        //Add your options here\n      };\n\n      return {\n        setOptions : function(newOps){\n          angular.extend(defOps, newOps);\n        },\n        $get : function(){\n          return defOps;\n        }\n      }\n    }).directive('ngDropzone', ['$timeout', 'dropzoneOps', function($timeout, dropzoneOps){\n      return {\n        restrict : 'AE',\n        template : '<div ng-transclude></div>',\n        replace : true,\n        transclude: true,\n        scope : {\n          options : '=?', //http://www.dropzonejs.com/#configuration-options\n          callbacks : '=?', //http://www.dropzonejs.com/#events\n          methods : '=?' //http://www.dropzonejs.com/#dropzone-methods\n        },\n        link : function(scope, iElem, iAttr){\n          //Set options for dropzone {override from dropzone options provider}\n          scope.options = scope.options || {};\n          var initOps = angular.extend({}, dropzoneOps, scope.options);\n\n\n          //Instantiate dropzone with initOps\n          var dropzone = new Dropzone(iElem[0], initOps);\n\n\n          /*********************************************/\n\n\n          //Instantiate Dropzone methods (Control actions)\n          scope.methods = scope.methods || {};\n\n          scope.methods.getDropzone = function(){\n            return dropzone; //Return dropzone instance\n          };\n\n          scope.methods.getAllFiles = function(){\n            return dropzone.files; //Return all files\n          };\n\n          var controlMethods = [\n            'removeFile', 'removeAllFiles', 'processQueue',\n            'getAcceptedFiles', 'getRejectedFiles', 'getQueuedFiles', 'getUploadingFiles',\n            'disable', 'enable', 'confirm', 'createThumbnailFromUrl'\n          ];\n\n          angular.forEach(controlMethods, function(methodName){\n            scope.methods[methodName] = function(){\n              dropzone[methodName].apply(dropzone, arguments);\n              if(!scope.$$phase && !scope.$root.$$phase) scope.$apply();\n            }\n          });\n\n\n          /*********************************************/\n\n\n          //Set invents (callbacks)\n          if(scope.callbacks){\n            var callbackMethods = [\n              'drop', 'dragstart', 'dragend',\n              'dragenter', 'dragover', 'dragleave', 'addedfile', 'removedfile',\n              'thumbnail', 'error', 'processing', 'uploadprogress',\n              'sending', 'success', 'complete', 'canceled', 'maxfilesreached',\n              'maxfilesexceeded', 'processingmultiple', 'sendingmultiple', 'successmultiple',\n              'completemultiple', 'canceledmultiple', 'totaluploadprogress', 'reset', 'queuecomplete'\n            ];\n            angular.forEach(callbackMethods, function(method){\n              var callback = (scope.callbacks[method] || angular.noop);\n              dropzone.on(method, function(){\n                callback.apply(null, arguments);\n                if(!scope.$$phase && !scope.$root.$$phase) scope.$apply();\n              });\n            });\n          }\n        }\n      }\n    }]);\n  }\n\n\n\n  if ((typeof module === 'object') && module.exports) {\n    /* CommonJS module */\n    module.exports = factory(require('angular'), require('dropzone'));\n  } else if (typeof define === 'function' && define.amd) {\n    /* AMD module */\n    define(['angular', 'dropzone'], factory);\n  } else {\n    /* Browser global */\n    factory(root.angular, root.Dropzone);\n  }\n})(this);\n"],"names":["root","factory","angular","Dropzone","default","module","provider","defOps","setOptions","newOps","extend","$get","directive","$timeout","dropzoneOps","restrict","template","replace","transclude","scope","options","callbacks","methods","link","iElem","iAttr","initOps","dropzone","getDropzone","getAllFiles","files","forEach","methodName","apply","arguments","$$phase","$root","$apply","method","callback","noop","on","exports","require","define","amd","this"],"mappings":"AAOA,CAAA,SAAUA,GACN,aACF,SAASC,EAAQC,EAASC,GAExBA,EAAWA,EAASC,SAAWD,EAASA,UAAYA,EAEpDD,EAAQG,OAAO,sBAAuB,EAAE,EAAEC,SAAS,cAAe,WAIhE,IAAIC,EAAS,GAIb,MAAO,CACLC,WAAa,SAASC,GACpBP,EAAQQ,OAAOH,EAAQE,CAAM,CAC/B,EACAE,KAAO,WACL,OAAOJ,CACT,CACF,CACF,CAAC,EAAEK,UAAU,aAAc,CAAC,WAAY,cAAe,SAASC,EAAUC,GACxE,MAAO,CACLC,SAAW,KACXC,SAAW,4BACXC,QAAU,CAAA,EACVC,WAAY,CAAA,EACZC,MAAQ,CACNC,QAAU,KACVC,UAAY,KACZC,QAAU,IACZ,EACAC,KAAO,SAASJ,EAAOK,EAAOC,GAE5BN,EAAMC,QAAUD,EAAMC,SAAW,GACjC,IAAIM,EAAUxB,EAAQQ,OAAO,GAAII,EAAaK,EAAMC,OAAO,EAIvDO,EAAW,IAAIxB,EAASqB,EAAM,GAAIE,CAAO,EAO7CP,EAAMG,QAAUH,EAAMG,SAAW,GAEjCH,EAAMG,QAAQM,YAAc,WAC1B,OAAOD,CACT,EAEAR,EAAMG,QAAQO,YAAc,WAC1B,OAAOF,EAASG,KAClB,EAQA5B,EAAQ6B,QANa,CACnB,aAAc,iBAAkB,eAChC,mBAAoB,mBAAoB,iBAAkB,oBAC1D,UAAW,SAAU,UAAW,0BAGF,SAASC,GACvCb,EAAMG,QAAQU,GAAc,WAC1BL,EAASK,GAAYC,MAAMN,EAAUO,SAAS,EAC1Cf,EAAMgB,SAAYhB,EAAMiB,MAAMD,SAAShB,EAAMkB,OAAO,CAC1D,CACF,CAAC,EAOElB,EAAME,WASPnB,EAAQ6B,QARc,CACpB,OAAQ,YAAa,UACrB,YAAa,WAAY,YAAa,YAAa,cACnD,YAAa,QAAS,aAAc,iBACpC,UAAW,UAAW,WAAY,WAAY,kBAC9C,mBAAoB,qBAAsB,kBAAmB,kBAC7D,mBAAoB,mBAAoB,sBAAuB,QAAS,iBAEzC,SAASO,GACxC,IAAIC,EAAYpB,EAAME,UAAUiB,IAAWpC,EAAQsC,KACnDb,EAASc,GAAGH,EAAQ,WAClBC,EAASN,MAAM,KAAMC,SAAS,EAC1Bf,EAAMgB,SAAYhB,EAAMiB,MAAMD,SAAShB,EAAMkB,OAAO,CAC1D,CAAC,CACH,CAAC,CAEL,CACF,CACF,EAAE,CACJ,CAIuB,UAAlB,OAAOhC,QAAwBA,OAAOqC,QAEzCrC,OAAOqC,QAAUzC,EAAQ0C,QAAQ,SAAS,EAAGA,QAAQ,UAAU,CAAC,EACrC,YAAlB,OAAOC,QAAyBA,OAAOC,IAEhDD,OAAO,CAAC,UAAW,YAAa3C,CAAO,EAGvCA,EAAQD,EAAKE,QAASF,EAAKG,QAAQ,CAEtC,EAAE2C,IAAI"}